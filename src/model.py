import torch
import torch.nn as nn


class CulinaryModel(nn.Module):
    def __init__(self):
        super(CulinaryModel, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(128, 64, kernel_size=1, stride=1, padding=0)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.maxpool3 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv6 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.conv7 = nn.Conv2d(256, 128, kernel_size=1, stride=1, padding=0)
        self.conv8 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.maxpool4 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv9 = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.conv10 = nn.Conv2d(512, 256, kernel_size=1, stride=1, padding=0)
        self.conv11 = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.conv12 = nn.Conv2d(512, 256, kernel_size=1, stride=1, padding=0)
        self.conv13 = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.maxpool5 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv14 = nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1)
        self.conv15 = nn.Conv2d(1024, 512, kernel_size=1, stride=1, padding=0)
        self.conv16 = nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1)
        self.conv17 = nn.Conv2d(1024, 512, kernel_size=1, stride=1, padding=0)
        self.conv18 = nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1)
        self.conv19 = nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1)
        self.conv20 = nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1)
        self.conv21 = nn.Conv2d(1024, 1024, kernel_size=3, stride=2, padding=1)
        self.conv22 = nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1)
        self.conv23 = nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1)
        self.conv24 = nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1)
        self.linear = nn.Linear(50176, 1470)
        self.leakyrelu = nn.LeakyReLU(0.1)
        self.dropout = nn.Dropout(0.5)
        self.batchnorm1 = nn.BatchNorm2d(32)
        self.batchnorm2 = nn.BatchNorm2d(64)
        self.batchnorm3 = nn.BatchNorm2d(128)
        self.batchnorm4 = nn.BatchNorm2d(256)
        self.batchnorm5 = nn.BatchNorm2d(512)
        self.batchnorm6 = nn.BatchNorm2d(1024)

    def forward(self, x):
        x = self.batchnorm1(self.leakyrelu(self.conv1(x)))
        x = self.maxpool1(x)
        x = self.batchnorm2(self.leakyrelu(self.conv2(x)))
        x = self.maxpool2(x)
        x = self.batchnorm3(self.leakyrelu(self.conv3(x)))
        x = self.batchnorm4(self.leakyrelu(self.conv4(x)))
        x = self.batchnorm3(self.leakyrelu(self.conv5(x)))
        x = self.maxpool3(x)
        x = self.batchnorm4(self.leakyrelu(self.conv6(x)))
        x = self.batchnorm5(self.leakyrelu(self.conv7(x)))
        x = self.batchnorm4(self.leakyrelu(self.conv8(x)))
        x = self.maxpool4(x)
        x = self.batchnorm5(self.leakyrelu(self.conv9(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv10(x)))
        x = self.batchnorm5(self.leakyrelu(self.conv11(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv12(x)))
        x = self.batchnorm5(self.leakyrelu(self.conv13(x)))
        x = self.maxpool5(x)
        x = self.batchnorm6(self.leakyrelu(self.conv14(x)))
        x = self.batchnorm5(self.leakyrelu(self.conv15(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv16(x)))
        x = self.batchnorm5(self.leakyrelu(self.conv17(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv18(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv19(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv20(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv21(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv22(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv23(x)))
        x = self.batchnorm6(self.leakyrelu(self.conv24(x)))
        x = x.view(-1, 50176)
        x = self.linear(x)
        return x
